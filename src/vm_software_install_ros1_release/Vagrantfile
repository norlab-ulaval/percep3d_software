# -*- mode: ruby -*-
# vi: set ft=ruby :

ENV["LC_ALL"] = "en_US.UTF-8"

## Set which virtual box
#UBUNTU_BOX = "bento/ubuntu-20.04"
UBUNTU_BOX = "bento/ubuntu-20.04-arm64"

Vagrant.configure("2") do |config|
  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # NOTE: This will enable public access to the opened port
  # config.vm.network "forwarded_port", guest: 80, host: 8080

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine and only allow access
  # via 127.0.0.1 to disable public access
  # config.vm.network "forwarded_port", guest: 80, host: 8080, host_ip: "127.0.0.1"

  # ====Shared folder======================
  config.vm.synced_folder "../..", "/opt/percep3d_software",
    type: "rsync",
    # owner: "percep3d",
    # group: "percep3d",
    rsync__exclude: [".vagrant", ".idea", ".DS_Store", "src/vm_software_install_ros2"],
    automount: true,
    rsync__verbose: false,
    rsync__auto: true

  # ====vagrant-gatling-rsync==============
  ##   Ref https://github.com/smerrill/vagrant-gatling-rsync
  #if Vagrant.has_plugin?("vagrant-gatling-rsync")
  #  config.gatling.latency = 2.5
  #  config.gatling.time_format = "%H:%M:%S"
  #end

  # Automatically start the sync engine on vagrant up or vagrant reload
  # when the machines that you bring up have one or more rsync folders defined
  config.gatling.rsync_on_startup = false

  # ====Provider-specific configuration====
  #  Parallels Tools customization with prlctl command-line utility:
  #  Ref:
  #  - https://parallels.github.io/vagrant-parallels/docs/configuration.html
  #  - https://download.parallels.com/desktop/v16/docs/en_US/Parallels%20Desktop%20Pro%20Edition%20Command-Line%20Reference.pdf
  #
  config.vm.provider "parallels" do |prl|
    prl.name = "percep3d-vm-ros1-vagrant-release"
#     prl.memory = 16048
    prl.memory = 65536 # Required for optimized performance setting
    prl.cpus = 8

    # Setup Parallels Tools Auto-Update
    prl.update_guest_tools = true

    # VM portability
    prl.linked_clone = false # (CRITICAL) ToDo: Switch to false for release (!)

    prl.customize "post-import", ["set", :id,
        "--startup-view", "window",
        "--3d-accelerate", "highest",
        "--high-resolution", "on",
        "--faster-vm", "on",
        "--resource-quota", "unlimited",
        "--description", "Perception 3D robotics perception course VM, ROS1 version, Vagrant release"
        ]
    # GUI cutomizations: --startup-view [window, fullscreen, headless, same] --3d-accelerate highest --high-resolution on
    # Optimization cutomizations: --faster-vm on --resource-quota unlimited
  end

  # ====Multimachine config================
  # Note:
  # - VM port mapping:
  #     - port 80 (mapped to host 8080) is for docker internet access, e.g. executin apt-get update inside docker container
  #     - port 2222 is for accessing the VM ssh server for Remote Developement setup

  config.vm.define "percep3d-vm-ros1-release", primary: true do |tcserver|
    tcserver.vm.box = UBUNTU_BOX
    tcserver.vm.hostname = "percep3d"
    tcserver.vm.network "private_network", ip: "132.203.26.126"
    config.vm.network "forwarded_port", guest: 80, host: 8080
    config.vm.network "forwarded_port", guest: 2222, host: 2222
    # # tcserver.vm.network "forwarded_port", guest: 8111, host: 8111, guest_ip: "132.203.26.126"
    #
    tcserver.vm.provision "Check network", type: "shell", run: "always", inline: <<-SHELL
        echo
        echo "I am '$(whoami)', my address is $(ifconfig eth1 | grep inet | awk '$1==\"inet\" {print $2}')"
        echo
    SHELL
  end

  # ====Provisioning========================
  $INLINE_SCRIP_1 = <<-'SCRIPT'

  export DEBIAN_FRONTEND=noninteractive
  apt-get update
  apt-get install --assume-yes \
      locales \
      sudo \
      apt-utils \
      lsb-release \
      ca-certificates \
      software-properties-common \
      build-essential \
      bash-completion \
      fontconfig \
      vim \
      tree \
      git \
      curl \
      wget \
      gnupg2 \
      zip gzip tar unzip \
      rsync \
      net-tools \
      dnsutils

  echo -e "\nInstall The Ubuntu Desktop Gui\n"
  apt-get install --assume-yes --no-install-recommends ubuntu-desktop
  SCRIPT

  config.vm.provision :shell do |shell|
    shell.inline = $INLINE_SCRIP_1
    shell.privileged = true
    shell.reboot = true
  end

  $INLINE_SCRIP_2 = <<-'SCRIPT'
  echo -e "\nUpdate Ubuntu Desktop\n"
  apt-get update
  apt-get upgrade --assume-yes

  echo -e "\nSetup dev aliases\n"
  ( \
    echo ""; \
    echo "# >>> percep3d_software aliases"; \
    echo "alias p3d_cd='cd /opt/percep3d_software/src/vm_software_install_ros1'"; \
    echo "alias p3d_install='cd /opt/percep3d_software/src/vm_software_install_ros1 && sudo bash install_percep3d_software_ros1.bash --install-ssh-daemon'"; \
    echo ""; \
  ) | tee --append /home/vagrant/.bashrc

  # echo -e "\nExecute $ sudo bash install_percep3d_software_ros1.bash --install-ssh-daemon\n"
  # cd /opt/percep3d_software/src/vm_software_install_ros1
  #sudo bash install_percep3d_software_ros1.bash --install-ssh-daemon
  SCRIPT

  config.vm.provision :shell do |shell|
   shell.inline = $INLINE_SCRIP_2
   shell.privileged = true
   shell.reboot = false
  end

  # Execute rsync from the host on 'vagrant up' trigger
  config.trigger.after :up do |trigger|
     trigger.only_on = "percep3d-vm-ros1-release"
     trigger.name = "rsync cmd"
     trigger.info = "Executing 'vagrant rsync' now"
     trigger.run = {inline: "bash -c 'vagrant rsync'"}
     trigger.on_error = :continue
  end

  # Execute rsync from the host on 'vagrant snapshot' trigger
  config.trigger.after :snapshot_restore, type: :action do |trigger|
     trigger.only_on = "percep3d-vm-ros1-release"
     trigger.name = "rsync cmd on 'vagrant snapshot restore'"
     trigger.info = "Executing 'vagrant rsync' now"
     trigger.run = {inline: "bash -c 'vagrant rsync'"}
     trigger.on_error = :continue
  end

  config.trigger.after :up do |trigger|
    trigger.only_on = "percep3d-vm-ros1-release"
    trigger.name = "Dir sync info"
    trigger.info = "\033[1;33m Remember to use the command \033[1;2mvagrant rsync\033[0m\033[1;33m to execute a one time sync of the \033[1;2mpercep3d_software\033[0m\033[1;33m directory with all guess VM or use the command \033[1;2mvagrant rsync-auto\033[0m\033[1;33m to start file watching and sync automaticaly on changes. Alternatively, enable \033[1;2mvagrant-gatling-rsync\033[0m\033[1;33m in the Vagrantfile.\033[0m"
  end


end


